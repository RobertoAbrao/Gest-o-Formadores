
'use server';

/**
 * @fileOverview Fluxo de IA para gerar um mapa mental a partir de dados de um relat√≥rio de forma√ß√£o.
 *
 * - gerarMapaMental - Fun√ß√£o que chama o fluxo de IA.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

const RespostasAbertasSchema = z.object({
  motivos: z.array(z.string()).describe('Lista de motivos pelos quais o material n√£o atendeu √†s expectativas.'),
  interesses: z.array(z.string()).describe('Lista de interesses dos participantes para futuras forma√ß√µes.'),
  observacoes: z.array(z.string()).describe('Lista de observa√ß√µes e sugest√µes gerais.'),
});

const PontosSchema = z.object({
    assuntos: z.record(z.string(), z.number()).optional(),
    organizacao: z.record(z.string(), z.number()).optional(),
    relevancia: z.record(z.string(), z.number()).optional(),
    material: z.record(z.string(), z.number()).optional(),
});

const GerarMapaMentalInputSchema = z.object({
  tituloFormacao: z.string().describe('O t√≠tulo principal da forma√ß√£o.'),
  participantes: z.number().describe('O n√∫mero total de participantes ou respostas.'),
  formadores: z.array(z.string()).describe('Uma lista com os nomes dos formadores.'),
  mediaGeralFormador: z.number().describe('A m√©dia de avalia√ß√£o geral dos formadores (de 1 a 5).'),
  mediaGeralEditora: z.number().describe('A m√©dia de avalia√ß√£o geral da editora (de 1 a 5).'),
  respostasAbertas: RespostasAbertasSchema.describe('Respostas abertas e qualitativas dos participantes.'),
  pontosFortes: PontosSchema.describe('Dados quantitativos sobre pontos fortes (assuntos, organiza√ß√£o, relev√¢ncia).'),
  pontosMelhorar: PontosSchema.describe('Dados quantitativos sobre pontos a melhorar (material).'),
});

type GerarMapaMentalInput = z.infer<typeof GerarMapaMentalInputSchema>;

// Define o fluxo de IA
const gerarMapaMentalFlow = ai.defineFlow(
  {
    name: 'gerarMapaMentalFlow',
    inputSchema: GerarMapaMentalInputSchema,
    outputSchema: z.string(),
  },
  async (input) => {
    
    // Constr√≥i o prompt para a IA
    const prompt = `
      Voc√™ √© um especialista em an√°lise de dados pedag√≥gicos e visualiza√ß√£o de informa√ß√µes.
      Sua tarefa √© transformar os dados brutos de um relat√≥rio de forma√ß√£o em um mapa mental claro e conciso, em formato Markdown.

      O n√≥ central do mapa deve ser o t√≠tulo da forma√ß√£o.
      Crie ramos principais para: Resultados Chave, Equipe, Pontos Fortes, Pontos a Melhorar e Sugest√µes.
      Sintetize as informa√ß√µes de forma inteligente. N√£o apenas liste os dados, mas extraia insights.
      Use emojis para tornar o mapa mais visual e agrad√°vel.

      Dados do Relat√≥rio:
      - T√≠tulo da Forma√ß√£o: ${input.tituloFormacao}
      - Total de Participantes/Respostas: ${input.participantes}
      - Equipe de Formadores: ${input.formadores.join(', ')}
      - M√©dia de Avalia√ß√£o (Formadores): ${input.mediaGeralFormador.toFixed(1)} / 5
      - M√©dia de Avalia√ß√£o (Editora): ${input.mediaGeralEditora.toFixed(1)} / 5
      - Respostas sobre material n√£o atender: ${input.respostasAbertas.motivos.join('; ')}
      - Interesses para futuras forma√ß√µes: ${input.respostasAbertas.interesses.join('; ')}
      - Observa√ß√µes e Sugest√µes: ${input.respostasAbertas.observacoes.join('; ')}

      Analise os dados quantitativos para identificar os pontos mais votados em cada categoria (pontos fortes e a melhorar).

      Exemplo de Sa√≠da:
      - **T√≠tulo da Forma√ß√£o**
        - **Resultados üìä**
          - M√©dia Formadores: 4.8 / 5
          - M√©dia Editora: 4.5 / 5
        - **Pontos Fortes ‚úÖ**
          - Assuntos foram 'Muito Relevantes'.
          - Organiza√ß√£o do evento foi '√ìtima'.
        - **Pontos a Melhorar ‚ö†Ô∏è**
          - Material did√°tico atendeu apenas 'Parcialmente'.
            - *Motivo: "Faltam exemplos pr√°ticos."*
        - **Sugest√µes üí°**
          - Oferecer workshops pr√°ticos.
          - Disponibilizar slides com anteced√™ncia.

      Agora, gere o mapa mental para os dados fornecidos.
    `;

    const { text } = await ai.generate({ prompt });
    return text;
  }
);

// Fun√ß√£o de inv√≥lucro para ser chamada a partir do front-end
export async function gerarMapaMental(input: GerarMapaMentalInput): Promise<string> {
  return gerarMapaMentalFlow(input);
}

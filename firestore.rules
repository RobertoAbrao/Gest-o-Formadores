rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is an administrator.
    // This requires a 'usuarios' collection where document IDs are user UIDs
    // and each document has a 'perfil' field set to 'administrador'.
    function isAdmin() {
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.perfil == 'administrador';
    }

    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read their own profile information.
    // Only administrators can create or delete users.
    // Users can update their own data, but not their role.
    match /usuarios/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow create, delete: if isAdmin();
      allow update: if isSignedIn() && request.auth.uid == userId && request.resource.data.perfil == resource.data.perfil;
      allow update: if isAdmin(); // Admins can update anything.
    }

    // Administrators can do anything with formadores.
    // All authenticated users (including formadores) can read the list.
    match /formadores/{formadorId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /formadores/{formadorId}/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Administrators can do anything with materiais.
    // All authenticated users (including formadores) can read the list.
    match /materiais/{materialId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
     match /materiais/{materialId}/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Fallback rule: deny all other access.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
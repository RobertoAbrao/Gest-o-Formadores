rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator.
    // This requires a 'usuarios' collection where document IDs are user UIDs
    // and each document has a 'perfil' field set to 'administrador'.
    function isAdmin() {
      return exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.perfil == 'administrador';
    }

    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for 'usuarios' collection
    match /usuarios/{userId} {
      // Allow reading own profile, or any profile if admin
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      // Allow admins to create new users
      allow create: if isAdmin();
      // Allow user to update their own data (but not their role), or admin to update anything
      allow update: if (isSignedIn() && request.auth.uid == userId && request.resource.data.perfil == resource.data.perfil) || isAdmin();
      // Allow admins to delete users
      allow delete: if isAdmin();
    }

    // Rules for 'formadores' collection
    match /formadores/{formadorId} {
        // Any signed-in user can read the list of trainers
        allow read: if isSignedIn();
        // Only admins can create, update, or delete trainers
        allow create, update, delete: if isAdmin();
    }

    // Rules for 'materiais' collection
    match /materiais/{materialId} {
        // Any signed-in user can read materials
        allow read: if isSignedIn();
        // Only admins can create, update, or delete materials
        allow create, update, delete: if isAdmin();
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator.
    // This requires a 'usuarios' collection where document IDs are user UIDs
    // and each document has a 'perfil' field set to 'administrador'.
    function isAdmin() {
      // Check if the user is signed in and then check their profile.
      return request.auth != null && 
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.perfil == 'administrador';
    }

    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for 'usuarios' collection
    match /usuarios/{userId} {
      // Admins can read any user profile. Regular users can only read their own.
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == userId);
      
      // Only Admins can create, update, or delete user profiles.
      // A regular user cannot change their own profile directly through rules, 
      // this must be handled by specific logic if needed.
      allow write: if isAdmin();
    }

    // Rules for 'formadores' collection
    match /formadores/{formadorId} {
        // Any signed-in user can read the list of trainers
        allow read: if isSignedIn();
        // Only admins can create, update, or delete trainers
        allow write: if isAdmin();
    }

    // Rules for 'materiais' collection
    match /materiais/{materialId} {
        // Any signed-in user can read materials
        allow read: if isSignedIn();
        // Only admins can create, update, or delete materials
        allow write: if isAdmin();
    }
  }
}

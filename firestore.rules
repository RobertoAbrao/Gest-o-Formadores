
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator.
    // This requires a 'usuarios' collection where document IDs are user UIDs
    // and each document has a 'perfil' field set to 'administrador'.
    function isAdmin() {
      // Check if the user making the request has an 'administrador' profile.
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.perfil == 'administrador';
    }

    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for 'usuarios' collection
    match /usuarios/{userId} {
      // READ: An admin can read any user's profile. A regular user can only read their own.
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == userId);
      
      // CREATE: Only an administrator can create a new user document.
      allow create: if isAdmin();
      
      // UPDATE: An admin can update any user. A regular user can only update their own data,
      // and cannot change their own 'perfil'.
      allow update: if isAdmin() || (isSignedIn() && request.auth.uid == userId && request.resource.data.perfil == resource.data.perfil);
      
      // DELETE: Only an admin can delete a user document.
      allow delete: if isAdmin();
    }

    // Rules for 'formadores' collection
    match /formadores/{formadorId} {
        // READ: Any signed-in user can view the list of trainers.
        allow read: if isSignedIn();
        
        // WRITE (CREATE, UPDATE, DELETE): Only administrators can manage trainer records.
        allow write: if isAdmin();
    }

    // Rules for 'materiais' collection
    match /materiais/{materialId} {
        // READ: Any signed-in user can view materials.
        allow read: if isSignedIn();
        
        // WRITE (CREATE, UPDATE, DELETE): Only administrators can manage materials.
        allow write: if isAdmin();
    }
  }
}

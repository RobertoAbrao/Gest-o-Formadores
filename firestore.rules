rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an administrator
    function isUserAdmin(userId) {
      return get(/databases/$(database)/documents/usuarios/$(userId)).data.perfil == 'administrador';
    }
    
    // Users collection: only admins can create/delete, users can see their own profile
    match /usuarios/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isUserAdmin(request.auth.uid));
      allow create, delete: if isUserAdmin(request.auth.uid);
      allow update: if request.auth.uid == userId || isUserAdmin(request.auth.uid);
    }

    // Trainers collection: Public read for evaluation form, only admins can write.
    match /formadores/{formadorId} {
      allow read: if true;
      allow write: if isUserAdmin(request.auth.uid);
    }
    
    // Assessores collection: only admins can manage
    match /assessores/{assessorId} {
        allow read: if request.auth != null;
        allow write: if isUserAdmin(request.auth.uid);
    }

    // Materials collection: only admins can manage, all authenticated can read
    match /materiais/{materialId} {
      allow read: if request.auth != null;
      allow write: if isUserAdmin(request.auth.uid);
    }
    
    // Formations collection: Admins can manage, anyone can read a single formation for the evaluation form.
    match /formacoes/{formacaoId} {
        allow get: if true;
        allow list, write: if isUserAdmin(request.auth.uid);
    }
    
    // Expenses collection: trainers can create for themselves, admins can read all
    match /despesas/{despesaId} {
        allow read: if request.auth != null && (isUserAdmin(request.auth.uid) || request.auth.uid == resource.data.formadorId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.formadorId;
        allow update, delete: if request.auth != null && (isUserAdmin(request.auth.uid) || request.auth.uid == resource.data.formadorId);
    }

    // Projects collection: only admins can manage
    match /projetos/{projetoId} {
        allow read, write: if isUserAdmin(request.auth.uid);
    }
    
    // Evaluations collection: anyone can create, only admins can read
    match /avaliacoes/{avaliacaoId} {
        allow read: if isUserAdmin(request.auth.uid);
        allow create: if true; // Public access to submit form
        allow write: if isUserAdmin(request.auth.uid);
    }
  }
}

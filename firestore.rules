
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is an administrator.
    function isAdmin() {
      return get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.perfil == 'administrador';
    }

    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read their own profile.
    // Admins can create new users and manage all users.
    // Users can update their own profile, but cannot change their role.
    match /usuarios/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow create, delete: if isAdmin();
      allow update: if (isSignedIn() && request.auth.uid == userId && request.resource.data.perfil == resource.data.perfil) || isAdmin();
    }

    // All authenticated users can read materials and formadores.
    // Only administrators can create, update, or delete them.
    match /formadores/{formadorId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // write includes create, update, delete
    }

    match /materiais/{materialId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // write includes create, update, delete
    }

    // Explicitly deny access to any other collections.
    // This is good practice but not strictly necessary if all paths are covered above.
    // Removing the overly restrictive /{document=**} that was likely causing issues.
  }
}
